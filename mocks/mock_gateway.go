// Code generated by MockGen. DO NOT EDIT.
// Source: n_labels/gateway (interfaces: MongoClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMongoClient is a mock of MongoClient interface.
type MockMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientMockRecorder
}

// MockMongoClientMockRecorder is the mock recorder for MockMongoClient.
type MockMongoClientMockRecorder struct {
	mock *MockMongoClient
}

// NewMockMongoClient creates a new mock instance.
func NewMockMongoClient(ctrl *gomock.Controller) *MockMongoClient {
	mock := &MockMongoClient{ctrl: ctrl}
	mock.recorder = &MockMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClient) EXPECT() *MockMongoClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMongoClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMongoClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoClient)(nil).Close))
}

// DeleteDocByID mocks base method.
func (m *MockMongoClient) DeleteDocByID(arg0, arg1 string, arg2 map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocByID indicates an expected call of DeleteDocByID.
func (mr *MockMongoClientMockRecorder) DeleteDocByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocByID", reflect.TypeOf((*MockMongoClient)(nil).DeleteDocByID), arg0, arg1, arg2)
}

// GetDocByID mocks base method.
func (m *MockMongoClient) GetDocByID(arg0, arg1 string, arg2 interface{}, arg3 string, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDocByID indicates an expected call of GetDocByID.
func (mr *MockMongoClientMockRecorder) GetDocByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocByID", reflect.TypeOf((*MockMongoClient)(nil).GetDocByID), arg0, arg1, arg2, arg3, arg4)
}

// InsertDoc mocks base method.
func (m *MockMongoClient) InsertDoc(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDoc", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDoc indicates an expected call of InsertDoc.
func (mr *MockMongoClientMockRecorder) InsertDoc(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDoc", reflect.TypeOf((*MockMongoClient)(nil).InsertDoc), arg0, arg1, arg2)
}

// ListDocs mocks base method.
func (m *MockMongoClient) ListDocs(arg0, arg1 string, arg2 interface{}, arg3 map[string]interface{}, arg4, arg5 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocs", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDocs indicates an expected call of ListDocs.
func (mr *MockMongoClientMockRecorder) ListDocs(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocs", reflect.TypeOf((*MockMongoClient)(nil).ListDocs), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateDocByID mocks base method.
func (m *MockMongoClient) UpdateDocByID(arg0, arg1, arg2 string, arg3 interface{}, arg4 string, arg5 interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocByID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocByID indicates an expected call of UpdateDocByID.
func (mr *MockMongoClientMockRecorder) UpdateDocByID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocByID", reflect.TypeOf((*MockMongoClient)(nil).UpdateDocByID), arg0, arg1, arg2, arg3, arg4, arg5)
}
